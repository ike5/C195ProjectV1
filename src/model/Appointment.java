package model;

import java.util.function.Supplier;

/**
 * Rules: An appointment cannot be made without a customer, user, and contact
 */
public class Appointment {
    // Everything except title and location can be null
    private int appointmentInt;         // autogenerated
    private String appointmentTitle;    // must provide a value
    private String appointmentDescription;
    private String appointmentLocation; // must provide a value
    private String type;                // use ApptFactory
    private int customerId;
    private int userId;
    private int contactId;

    public Appointment(int appointmentInt, String appointmentTitle, String appointmentDescription, String appointmentLocation, String type, int customerId, int userId, int contactId) {
        this.appointmentInt = appointmentInt;
        this.appointmentTitle = appointmentTitle;
        this.appointmentDescription = appointmentDescription;
        this.appointmentLocation = appointmentLocation;
        this.type = type;
        this.customerId = customerId;
        this.userId = userId;
        this.contactId = contactId;
    }

    public int getAppointmentInt() {
        return appointmentInt;
    }

    public String getAppointmentTitle() {
        return appointmentTitle;
    }

    public String getAppointmentDescription() {
        return appointmentDescription;
    }

    public String getAppointmentLocation() {
        return appointmentLocation;
    }

    public String getType() {
        return type;
    }

    public int getCustomerId() {
        return customerId;
    }

    public int getUserId() {
        return userId;
    }

    public int getContactId() {
        return contactId;
    }

    //                ApptFactory.getAppt(ApptType.PLAN).getAppointmentTypeDescription()
}

interface Appt {
    String getAppointmentTypeDescription();
}

class PlanningAppt implements Appt {
    static final String DESCRIPTION = "Planning Session";

    @Override
    public String getAppointmentTypeDescription() {
        return DESCRIPTION;
    }
}

class DebriefingAppt implements Appt {
    static final String DESCRIPTION = "De-Briefing";

    @Override
    public String getAppointmentTypeDescription() {
        return DESCRIPTION;
    }
}

enum ApptType {
    PLAN(PlanningAppt::new),
    DEBRIEF(DebriefingAppt::new);

    private final Supplier<Appt> constructor;

    ApptType(Supplier<Appt> constructor) {
        this.constructor = constructor;
    }

    public Supplier<Appt> getConstructor() {
        return constructor;
    }
}

class ApptFactory {
    public static Appt getAppt(ApptType type) {
        return type.getConstructor().get();
    }
}
