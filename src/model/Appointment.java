package model;

import data.DBContacts;
import data.DBCustomers;
import data.DBUsers;

import java.time.LocalDateTime;
import java.util.Locale;
import java.util.function.Supplier;

/**
 * Rules: An appointment cannot be made without a customer, user, and contact
 */
public class Appointment {
    // Everything except title and location can be null
    private int appointmentInt;         // autogenerated
    private String appointmentTitle;    // must provide a value
    private String appointmentDescription;
    private String appointmentLocation; // must provide a value
    private String type;                // use ApptFactory
    private Customer customer;          // to get customerId
    private User user;
    private Contact contact;
    private LocalDateTime start;
    private LocalDateTime end;



    // An appointment has a Contact, User, and Customer in addition to the fields that make up its body
    public Appointment(int appointmentInt, String appointmentTitle, String appointmentDescription, String appointmentLocation, String type, Customer customer_customerId, User user_userId, Contact contact_contactId) {
        this.appointmentInt = appointmentInt;
        this.appointmentTitle = appointmentTitle;
        this.appointmentDescription = appointmentDescription;
        this.appointmentLocation = appointmentLocation;
        this.type = type;
        this.customer = customer_customerId;
        this.user = user_userId;
        this.contact = contact_contactId;
    }

    // Used for the retrieval from database
    public Appointment(int appointmentInt, String appointmentTitle, String appointmentDescription, String appointmentLocation, String type, LocalDateTime start, LocalDateTime end, Customer customer_customerId, User user_userId, Contact contact_contactId) {
        this.appointmentInt = appointmentInt;
        this.appointmentTitle = appointmentTitle;
        this.appointmentDescription = appointmentDescription;
        this.appointmentLocation = appointmentLocation;
        this.type = type;
        this.start = start;
        this.end = end;
        this.customer = customer_customerId;
        this.user = user_userId;
        this.contact = contact_contactId;
    }

    public Appointment(int appointmentInt, String appointmentTitle, String appointmentDescription, String appointmentLocation, String type, LocalDateTime start, LocalDateTime end, int customerId, int userId, int contactId) {
        this.appointmentInt = appointmentInt;
        this.appointmentTitle = appointmentTitle;
        this.appointmentDescription = appointmentDescription;
        this.appointmentLocation = appointmentLocation;
        this.type = type;
        this.start = start;
        this.end = end;
        this.customer = DBCustomers.getCustomer(customerId);
        this.user = DBUsers.getUser(userId);
        this.contact = DBContacts.getContact(contactId);
    }

    public int getAppointmentInt() {
        return appointmentInt;
    }

    public String getAppointmentTitle() {
        return appointmentTitle;
    }

    public String getAppointmentDescription() {
        return appointmentDescription;
    }

    public String getAppointmentLocation() {
        return appointmentLocation;
    }

    public String getType() {
        return type;
    }

    public Customer getCustomer() {
        return customer;
    }

    public User getUser() {
        return user;
    }

    public Contact getContact() {
        return contact;
    }

    @Override
    public String toString() {
        return "Appointment{" +
                "appointmentInt=" + appointmentInt +
                ", appointmentTitle='" + appointmentTitle + '\'' +
                ", appointmentDescription='" + appointmentDescription + '\'' +
                ", appointmentLocation='" + appointmentLocation + '\'' +
                ", type='" + type + '\'' +
                ", customer=" + customer +
                ", user=" + user +
                ", contact=" + contact +
                '}';
    }

    //                ApptFactory.getAppt(ApptType.PLAN).getAppointmentTypeDescription()
}

interface Appt {
    String getAppointmentTypeDescription();
}

class PlanningAppt implements Appt {
    static final String DESCRIPTION = "Planning Session";

    @Override
    public String getAppointmentTypeDescription() {
        return DESCRIPTION;
    }
}

class DebriefingAppt implements Appt {
    static final String DESCRIPTION = "De-Briefing";

    @Override
    public String getAppointmentTypeDescription() {
        return DESCRIPTION;
    }
}

enum ApptType {
    PLAN(PlanningAppt::new),
    DEBRIEF(DebriefingAppt::new);

    private final Supplier<Appt> constructor;

    ApptType(Supplier<Appt> constructor) {
        this.constructor = constructor;
    }

    public Supplier<Appt> getConstructor() {
        return constructor;
    }
}

class ApptFactory {
    public static Appt getAppt(ApptType type) {
        return type.getConstructor().get();
    }
}
